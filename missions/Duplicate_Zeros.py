# Duplicate Zeros >< 
# –°–ª–æ–ø–∞–π—Ç–µ –≤—Å–µ –ø–æ–Ω—á–∏–∫–∏... —É–ø—Å, —É–¥–≤–æ–π—Ç–µ –≤—Å–µ –Ω—É–ª–∏ –≤ —Å–ø–∏—Å–∫–µ ? 
# Elementary+ <>
# Russian list --
# ___________________________________________________________________________________
# Elementary+
# EN Russian UK

# "–ò–Ω–æ–≥–¥–∞ –Ω—É–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –æ—á–µ–Ω—å –≤–∫—É—Å–Ω—ã–µ –ø–æ–Ω—á–∏–∫–∏. –ò –∫–∞–∂–¥—ã–π —Ä–∞–∑, –¥–æ–µ–¥–∞—è –ø–æ–Ω—á–∏–∫, –Ω–∞–º —Ö–æ—á–µ—Ç—Å—è –µ—â—ë –æ–¥–∏–Ω, –∞ –ø–æ—Ç–æ–º –µ—â—ë, –∏ –µ—â—ë..."

# –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. 
# –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤ —ç—Ç–æ–π –º–∏—Å—Å–∏–∏ ‚Äì –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å (..., üç©, ... --> ..., üç©, üç©, ...) 
# –≤—Å–µ –Ω—É–ª–∏ –≤ –¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ (–¥—É–º–∞–π—Ç–µ –æ –ø–æ–Ω—á–∏–∫–∞—Ö ;-P) –∏ –≤–µ—Ä–Ω—É—Ç—å –≤ –≤–∏–¥–µ –ª—é–±–æ–≥–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ü–æ—Å–º–æ—Ç—Ä–∏–º –Ω–∞ –ø—Ä–∏–º–µ—Ä:
# [1, 0, 2, 0] -> [1, 0, 0, 2, 0, 0]
    
# –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –°–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.
# –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –°–ø–∏—Å–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç (–∫–æ—Ä—Ç–µ–∂, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏—Ç–µ—Ä–∞—Ç–æ—Ä) –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.

# –ü—Ä–∏–º–µ—Ä—ã:
# assert list(duplicate_zeros([1, 0, 2, 3, 0, 4, 5, 0])) == [
#   1,
#   0,
#   0,
#   2,
#   3,
#   0,
#   0,
#   4,
#   5,
#   0,
#   0,
# ]
# assert list(duplicate_zeros([0, 0, 0, 0])) == [0, 0, 0, 0, 0, 0, 0, 0]
# assert list(duplicate_zeros([100, 10, 0, 101, 1000])) == [100, 10, 0, 0, 101, 1000]

# –ï—Å–ª–∏ –≤—ã –ø—Ä–æ—à–ª–∏ –º–∏—Å—Å–∏—é, –º–æ–∂–µ—Ç–µ —Å–æ —Å–ø–æ–∫–æ–π–Ω–æ–π –¥—É—à–æ–π –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è üç©!=)

# ___________________________________________________________________________________
# SOLUTION 16. <>
from collections.abc import Iterable


def duplicate_zeros(donuts: list[int]) -> Iterable[int]:
    idx = 0
    new_list = []
    for el in donuts:
        new_list.append(el)
        if el == 0:
            new_list.append(0)
    return new_list
            
print("Example:")
print(list(duplicate_zeros([1, 0, 2, 3, 0, 4, 5, 0])))

# These "asserts" are used for self-checking
assert list(duplicate_zeros([1, 0, 2, 3, 0, 4, 5, 0])) == [
    1,
    0,
    0,
    2,
    3,
    0,
    0,
    4,
    5,
    0,
    0,
]
assert list(duplicate_zeros([0, 0, 0, 0])) == [0, 0, 0, 0, 0, 0, 0, 0]
assert list(duplicate_zeros([100, 10, 0, 101, 1000])) == [100, 10, 0, 0, 101, 1000]


# <><><><><> Best "Clear" Solution <><><><><>
def duplicate_zeros(donuts: list) -> list:
    # your code here
    return sum([[i] if i else [0 , 0] for i in donuts], [])

# <><><><><> Best "Creative" Solution <><><><><>
from collections.abc import Iterable
from itertools import chain

def duplicate_zeros(donuts: list[int]) -> Iterable[int]:
    return chain.from_iterable([d] if d else [d, d] for d in donuts)

# <><><><><> Best "Speedy" Solution <><><><><>
from typing import Iterable


def duplicate_zeros(donuts: list[int]) -> Iterable[int]:
    for v in donuts:
        if v == 0:
            yield 0
        yield v
    return []

# <><><><><> Best "3rd party" Solution <><><><><>
import numpy as np
def duplicate_zeros(donuts) -> list:
    arr = np.array(donuts)
    for idx, i in enumerate(*list(np.where(arr == 0))):
        donuts.insert(i+idx, 0)
    return donuts

# <><><><><> Uncategorized <><><><><>
from collections.abc import Iterable


def duplicate_zeros(donuts: list[int]) -> Iterable[int]:
    # your code here
    i=0
    aplique=donuts
    a=len(aplique)
    while i <a:
        if aplique[i]== 0:
            aplique.insert(i,0)
            i+=2
            a=len(aplique)
        else: 
            i+=1
   # print(aplique)

    return aplique

# ___________________________________________________________________________________
