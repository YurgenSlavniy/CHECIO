# Median >< 
# Find the mathematical median in a list of numbers ? 
# Elementary+ <>
# Russian has-hints numbers statistics --
# ___________________________________________________________________________________
# Медиана — это числовое значение, которое делит сортированый массив чисел на нижнюю и верхнюю половины. 
# В сортированом массиве с нечётным числом элементов медиана — это число в середине массива. 
# Для массива с чётным числом элементов, где нет одного элемента точно посередине, 
# медиана — это среднее значение двух чисел, находящихся в середине массива.
# В этой задаче дан непустой массив натуральных чисел. Вам необходимо найти медиану данного массива.

# Если ты хочешь больше попрактиковаться с подобным заданием, попробуй миссию Middle Characters.

# Входные данные: Массив как список (list) чисел (int).
# Выходные данные: Медиана как число (int, float).

# Примеры:
# assert checkio([1, 2, 3, 4, 5]) == 3
# assert checkio([3, 1, 2, 5, 3]) == 3
# assert checkio([1, 300, 2, 200, 1]) == 2
# assert checkio([3, 6, 20, 99, 10, 15]) == 12.5

# Как это используется: Медиана находит свое применение в статистике и теории вероятности, 
# и особенно важна для ассиметричного распределения. 
# Для примера: мы хотим узнать среднее доход населения -- 100 человек получают $100 в месяц и 10 человек получают $1,000,000. 
# Если мы возьмем среднее арифметическое, то получим $91,000.
# Это довольно странное число, не показывающее истинного положения дел. 
# В этом случае медиана будет равна $100, 
# что станет для нас более полезной величиной и покажет более правдоподобную картину. Статья в Википедии.

# Предусловия:
# 1 < len(data) ≤ 1000
# all(0 ≤ x < 10 ** 6 for x in data)

# ___________________________________________________________________________________
# SOLUTION 15. <>
import numpy as np

def checkio(data: list[int]) -> int | float:
    return np.median(data)


print("Example:")
print(checkio([1, 2, 3, 4, 5]))

# These "asserts" are used for self-checking
assert checkio([1, 2, 3, 4, 5]) == 3
assert checkio([3, 1, 2, 5, 3]) == 3
assert checkio([1, 300, 2, 200, 1]) == 2
assert checkio([3, 6, 20, 99, 10, 15]) == 12.5
assert checkio([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 5
assert checkio([0, 7, 1, 8, 4, 9, 5, 6, 2, 3]) == 4.5
assert checkio([33, 56, 62]) == 56
assert checkio([21, 56, 84, 82, 52, 9]) == 54
assert checkio([100, 1, 1, 1, 1, 1, 1]) == 1
assert checkio([64, 6, 92, 7, 70, 5]) == 35.5
