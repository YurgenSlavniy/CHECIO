# Golden Pyramid >< 
# Help Stephen find the best route down a pyramid ? 
# Elementary+ <>
# has-hints math numbers --
# ___________________________________________________________________________________
#  Elementary+

# Нашему Робо-Трио необходимо тренироваться для будущих приключений и охоты за сокровищами 
# (золотые контакты нужны всем). Стефан построил специальную упрощенную модель пирамиды. 
# И теперь наши роботы будут тренироваться в забегах за золотом на скорость. 
# Они начинают с вершины пирамиды и собирают золото в каждой комнате, 
# через которую проходят. В каждой комнате они выбирают влево или вправо и спускаются на следующий уровень. 
# Чтобы оценивать результаты, Стефану нужно знать, а сколько максимум можно собрать за один забег.

# Представьте список списков в котором первый список имеет одно число и следующие на одно число больше чем предыдущий. 
# Такой список списков будет выглядеть как пирамида.
# Тебе нужно написать функцию, которая поможет Стефану найти максимальную сумму золота на самом выгодном маршруте 
# с вершины пирамиды до ее основания. 
# Все маршруты прохода по пирамиде из шагов вниз и влево/вправо.

# Примечания: Попробуйте думать о шаге вниз-влево, как о движении в следующий ряд не изменяя индекс в ряду и о шаге вниз/вправо -
# - с увеличением индекса в ряду на единицу. Будьте осторожны если вы хотите решать задачу рекурсией. 
# получится медленное решение.

# Ввод: Пирамида, как список списков. Каждый список целых чисел.
# Вывод: Максимально количество золота за один забег, как целое число.

# Примеры:
assert (
    count_gold(
        [
            [1],
            [2, 3],
            [3, 3, 1],
            [3, 1, 5, 4],
            [3, 1, 3, 1, 3],
            [2, 2, 2, 2, 2, 2],
            [5, 6, 4, 5, 6, 4, 3],
        ]
    )
    == 23
)
assert (
    count_gold(
        [
            [1],
            [2, 1],
            [1, 2, 1],
            [1, 2, 1, 1],
            [1, 2, 1, 1, 1],
            [1, 2, 1, 1, 1, 1],
            [1, 2, 1, 1, 1, 1, 9],
        ]
    )
    == 15
)
assert count_gold([[9], [2, 2], [3, 3, 3], [4, 4, 4, 4]]) == 18
assert (
    count_gold(
        [[2], [7, 9], [0, 8, 6], [4, 7, 6, 8], [0, 5, 5, 4, 1], [9, 1, 0, 1, 6, 9]]
    )
    == 35
)

# Связь с реальной жизнью: Эта классическая задача может помочь вам освоить динамическое программирование. 
# Также это может пригодится вам для решения многих оптимизационных задач.

# Предусловия:
# -    0 < len(pyramid) ≤ 20;
# -   all(all(0 < x < 10 for x in row) for row in pyramid).
 

# ___________________________________________________________________________________
# SOLUTION <>

# <><><><><> Best "Clear" Solution <><><><><>
# <><><><><> Best "Creative" Solution <><><><><>
# <><><><><> Best "Speedy" Solution <><><><><>
# <><><><><> Best "3rd party" Solution <><><><><>
# <><><><><> Uncategorized <><><><><>
# ___________________________________________________________________________________
