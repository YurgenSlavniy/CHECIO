# ___________________________________________________________________________________
# MISSION 1. 
# Acceptable Password I >< 
# длина строки должна быть больше 6 ? 
# Elementary <>
# Russian string Bool --
# ___________________________________________________________________________________
# Elementary
# EN Russian JA PL

# Вы начали серию задач связаную с паролями. Каждая следующая задача связана с предыдущей. 
# Каждая следующая задача будет сложнее предыдущей.
# В этой задаче, Вам нужно создать функцию проверки пароля.
# Условия проверки:
# длина пароля должна быть больше 6.

# Входные данные: Строка.
# Выходные данные: Логический тип.

# Пример:
# is_acceptable_password('short') == False
# is_acceptable_password('muchlonger') == True

# Для чего это нужно: Для проверки заполнения пароля. Кроме того, полезно будет научиться оценивать задачи.
# ___________________________________________________________________________________
# SOLUTION 1. <>

def is_acceptable_password(password: str) -> bool:
    if len(password) <= 6:
        return False
    else:
        return True
      
if __name__ == '__main__':
    print("Example:")
    print(is_acceptable_password('short'))

    # These "asserts" are used for self-checking and not for an auto-testing
    assert is_acceptable_password('short') == False
    assert is_acceptable_password('muchlonger') == True
    assert is_acceptable_password('ashort') == False
    
# <><><><><> Best "Clear" Solution <><><><><>
def is_acceptable_password(password: str) -> bool:
    return len(password) > 6

# <><><><><> Best "Creative" Solution <><><><><>
def is_acceptable_password(password: str) -> bool:
    return bool(password[7::])

# <><><><><> Clear solution <><><><><>
is_acceptable_password = lambda password: len(password) > 6

# <><><><><> Uncategorized solution <><><><><>
def is_acceptable_password(password: str) -> bool: 
    return True if len(password) > 6 else False 

# ___________________________________________________________________________________
    
# ___________________________________________________________________________________
# MISSION 2. 
# The Cheapest Flight >< 
# Найти самый дешёвый перелёт ? 
# Simple <>
# Russian list --
# ___________________________________________________________________________________
# Simple
# EN Russian UK

# «Нам нужно долететь домой как можно дешевле, чтобы больше денег осталось на подарки. 
# Тётя Лида просила сыров разных, а Вася хотел машинку новую.
# Я уже довольно долго смотрю на расписание, и мне начинает казаться, 
# что некоторые самолёты летают зря.»

# На входе вы получаете расписание самолётов в виде списка, 
# каждый элемент которого — это цена прямого воздушного соединения двух городов 
# (список из 3 элементов: первые два — названия городов в виде строк, и третий — цена перелёта).

# Самолёты летают в обе стороны и цена в обе стороны одинаковая. 
# Есть вероятность, что соединения между городами может и не быть.

# Найдите цену самого дешёвого перелёта для городов,
# которые переданы 2-м и 3-м аргументами. Если перелет невозможен, верните 0

# Входные данные: 3 аргумента: расписание перелётов в виде списка списков, город вылета, город назначения как строки.
# Выходные данные: Лучшая цена как целое число.

# Примеры:

assert (
    cheapest_flight([["A", "C", 100], ["A", "B", 20], ["B", "C", 50]], "A", "C") == 70
)
assert (
    cheapest_flight([["A", "C", 100], ["A", "B", 20], ["B", "C", 50]], "C", "A") == 70
)
assert (
    cheapest_flight(
        [
            ["A", "C", 40],
            ["A", "B", 20],
            ["A", "D", 20],
            ["B", "C", 50],
            ["D", "C", 70],
        ],
        "D",
        "C",
    )
    == 60
)
assert (
    cheapest_flight([["A", "C", 100], ["A", "B", 20], ["D", "F", 900]], "A", "F") == 0
)

# Как это используется: может быть использовано в повседневной жизни для нахождения оптимальной комбинации.

# Предусловия:

# цена всегда целое число;
# в расписании рейсов есть хотя бы один элемент;
# оба искомых города есть в расписании.
# ___________________________________________________________________________________
# SOLUTION 2. <>

# <><><><><>  <><><><><>
# ___________________________________________________________________________________
